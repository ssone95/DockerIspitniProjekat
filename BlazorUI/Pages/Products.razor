@page "/Products"


<link rel="stylesheet" type="text/css" href="styles/checkout.css">
<link rel="stylesheet" type="text/css" href="styles/checkout_responsive.css">
<!-- Home -->

<div class="home">
    <div class="home_container">
        <div class="home_background" style="background-image:url(images/cart.jpg)"></div>
        <div class="home_content_container">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="home_content">
                            <div class="breadcrumbs">
                                <ul>
                                    <li><a href="/">Home</a></li>
                                    <li><a href="/Product">Assortment</a></li>
                                </ul>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<div class="products">
    <div class="container">

        <div class="row">

            <div class="col-md-3">

                <div class="form-group">
                    <label for="searchBy">Filter Products</label>
                    <input type="text" id="searchBy" class="checkout_input form-control" placeholder="Search by name..." @bind-value="FilterString" @oninput="FilterInputChanged" />
                </div>

                <div class="form-group">
                    <label for="sortBy">Sort By </label>
                    <select class="form-control" @onchange="@SelectedSortingMethod" id="sortBy">
                        <option value="@((int)Domain.DTO.SortingFields.None)">Sort by</option>
                        <option value="@((int)Domain.DTO.SortingFields.PriceAscending)">Price - Ascending</option>
                        <option value="@((int)Domain.DTO.SortingFields.PriceDescending)">Price - Descending</option>
                    </select>
                </div>
                <div class="sidebar">
                    <ul class="nav flex-column">
                        @foreach (var item in ProductTypes)
                        {
                            @if (item.SubTypes != null)
                            {
                                <li class="nav-item px-3">
                                    <button class="nav-link @(item.Expanded ? "expanded" : "") @(item.Id == CurrentProductType.Id ? "currentType" : "")" @onclick="@(() => SelectedProductType(item))">
                                        @item.Name
                                    </button>
                                    @if (item.Expanded)
                                    {
                                        <ul class="nav flex-column">
                                            @foreach (var subItem in item.SubTypes)
                                            {
                                                <li class="nav-item px-3">
                                                    <button class="nav-link @(subItem.Id == CurrentProductType.Id ? "currentType" : "")" @onclick="@(() => SelectedProductType(subItem))" @onclick:stopPropagation>
                                                        @subItem.Name
                                                    </button>
                                                </li>
                                            }
                                        </ul>
                                    }
                                </li>
                            }
                            else
                            {
                                <li class="nav-item px-3">
                                    <button class="nav-link @(item.Id == CurrentProductType.Id ? "currentType" : "")" @onclick="@(() => SelectedProductType(item))">
                                        @item.Name
                                    </button>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>

            <div class="col-md-9">

                <div class="product_grid row">


                    @foreach (var product in products)
                    {
                        <div class="product col-md-3">
                            <div class="product_image"><img src="@(product?.ProductPhotos[0]?.PhotoPath)" alt=""></div>
                            <div class="product_extra product_new"><a href="javascript:void(0)">New</a></div>
                            <div class="product_content">
                                <div class="product_title"><a href="/Product/@product.Id">@product.Name</a></div>
                                <div class="product_price">&euro;@product?.CalculatedPrice.ToString("#,##0.00")</div>
                            </div>
                        </div>
                    }

                </div>

                <div class="product_grid row">
                    <button class="btn btn-block btn-light" @onclick="LoadMore">
                        <span class="fa fa-refresh"></span> Load More
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

@using BlazorUI.Data
@inject BlazorUI.Helpers.ApiHelper api
@inject WeatherForecastService ForecastService;


@code {
    private List<Domain.Products.Product> products = new List<Domain.Products.Product>();

    private int currentPage { get; set; } = 1;


    private int itemsPerPage { get; set; } = 8;

    List<Domain.Products.ProductType> ProductTypes = new List<Domain.Products.ProductType>();

    Domain.Products.ProductType CurrentProductType = new Domain.Products.ProductType();

    Domain.DTO.SortingFields CurrentSortingMethod = Domain.DTO.SortingFields.None;

    System.Timers.Timer filterTask = null;

    string FilterString = "";

    protected override async Task OnInitializedAsync()
    {
        if (products.Count() < 1)
            await GetProducts();

        if (ProductTypes.Count() < 1)
            await GetProductTypes();
    }

    async Task SelectedSortingMethod(ChangeEventArgs e)
    {
        string value = (string)e.Value;
        Domain.DTO.SortingFields val = Domain.DTO.SortingFields.None;
        if (!String.IsNullOrEmpty(value))
        {
            int intVal = 0;
            Int32.TryParse(value, out intVal);

            val = (Domain.DTO.SortingFields)intVal;
        }

        currentPage = 1;
        CurrentSortingMethod = val;

        if (filterTask != null)
        {
            filterTask?.Stop();
            filterTask?.Dispose();
            filterTask = null;
        }

        filterTask = new System.Timers.Timer();
        filterTask.Elapsed += new System.Timers.ElapsedEventHandler(async (sender, args) =>
        {
            products.Clear();
            await GetProducts();
        });
        filterTask.Interval = 500;
        filterTask.Start();
    }

    async Task FilterInputChanged(ChangeEventArgs e)
    {
        FilterString = (string)e.Value;

        if (filterTask != null)
        {
            filterTask?.Stop();
            filterTask?.Dispose();
            filterTask = null;
        }

        filterTask = new System.Timers.Timer();
        filterTask.Elapsed += new System.Timers.ElapsedEventHandler(async (sender, args) =>
        {
            currentPage = 1;
            products.Clear();
            await GetProducts();
        });
        filterTask.Interval = 500;
        filterTask.Start();
    }

    async Task GetProductTypes()
    {
        var prodTypesResponse = await api.Post<List<Domain.Products.ProductType>>("api/ProductType/List", new Domain.DTO.ProductTypeFilterDTO() { MainTypes = true });
        if (prodTypesResponse.Success)
        {
            ProductTypes = new List<Domain.Products.ProductType>(prodTypesResponse?.Result ?? new List<Domain.Products.ProductType>());
        }
    }

    async Task SelectedProductType(Domain.Products.ProductType type)
    {
        if (type.SubTypes != null && type.SubTypes.Count() > 0)
            type.Expanded = !type.Expanded;

        CurrentProductType = type;

        if (filterTask != null)
        {
            filterTask?.Stop();
            filterTask?.Dispose();
            filterTask = null;
        }

        filterTask = new System.Timers.Timer();
        filterTask.Elapsed += new System.Timers.ElapsedEventHandler(async (sender, args) =>
        {
            currentPage = 1;
            products.Clear();
            await GetProducts();
        });
        filterTask.Interval = 500;
        filterTask.Start();
    }

    async Task GetProducts()
    {
        var filter = new Domain.DTO.ProductFilterDTO()
        {
            CurrentPage = currentPage,
            ItemsPerPage = itemsPerPage,
            SortingField = CurrentSortingMethod,
            FilterString = FilterString
        };
        if (CurrentProductType != null && CurrentProductType.Id > 0)
            filter.ProductTypeId = CurrentProductType.Id;

        var response = await api.Post<List<Domain.Products.Product>>("api/Product/List", filter);

        var data = response?.Result ?? new List<Domain.Products.Product>();

        products.AddRange(data);

        await InvokeAsync(() =>
        {
            filterTask?.Stop();
            StateHasChanged();
        });
    }

    async Task ItemsPerPageUpdated(ChangeEventArgs e)
    {
        int pageItems = 1;
        currentPage = 1;
        string pageItemsStr = e.Value as string;
        Int32.TryParse(pageItemsStr ?? "1", out pageItems);
        products.Clear();
        itemsPerPage = pageItems;


        await GetProducts();
    }

    async Task LoadMore()
    {
        currentPage++;
        await GetProducts();
    }
}
