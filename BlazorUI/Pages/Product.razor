@page "/Product/{Id:int}"

<link rel="stylesheet" type="text/css" href="/styles/product.css">
<link rel="stylesheet" type="text/css" href="/styles/product_responsive.css">

<div class="home">
    <div class="home_container">
        <div class="home_background" style="background-image:url(images/categories.jpg)"></div>
        <div class="home_content_container">
            <div class="container">
                <div class="row">
                    <div class="col">
                        <div class="home_content">
                            <div class="home_title">Smart Phones<span>.</span></div>
                            <div class="home_text"><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Nullam a ultricies metus. Sed nec molestie eros. Sed viverra velit venenatis fermentum luctus.</p></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<div class="product_details">
    <div class="container">
        <div class="row details_row">

            <!-- Product Image -->
            <div class="col-lg-6">
                <div class="details_image">
                    <div class="details_image_large"><img src="@(CurrentProduct?.ProductPhotos[0]?.PhotoPath ?? "images/details_1.jpg")" alt=""><div class="product_extra product_new"><a href="javascript:void(0);">New</a></div></div>
                    <div class="details_image_thumbnails d-flex flex-row align-items-start justify-content-between">
                        <div class="details_image_thumbnail active" data-image="@(CurrentProduct?.ProductPhotos[0]?.PhotoPath ?? "images/details_1.jpg")">
                            <img src="@(CurrentProduct?.ProductPhotos[0]?.PhotoPath ?? "images/details_1.jpg")" alt="">
                        </div>
                    </div>
                </div>
            </div>

            <!-- Product Content -->
            <div class="col-lg-6">
                <div class="details_content">
                    <div class="details_name">@CurrentProduct?.Name</div>
                    @if (CurrentProduct != null && CurrentProduct.CalculatedPrice != CurrentProduct.Price)
                    {
                        <div class="details_discount">&euro;@CurrentProduct?.Price.ToString("#,#00.00")</div>
                    }
                    <div class="details_price">&euro;@CurrentProduct?.CalculatedPrice.ToString("#,#00.00")</div>

                    <!-- In Stock -->
                    <div class="in_stock_container">
                        <div class="availability">Availability:</div>
                        <span>In Stock</span>
                    </div>

                    <!-- Product Quantity -->
                    <div class="product_quantity_container">
                        <div class="product_quantity clearfix">
                            <span>Qty</span>
                            <input type="number" id="quantity_input" pattern="[0-9]*" @bind-value="QuantityToAdd" />
                            <div class="quantity_buttons">
                                <button id="quantity_inc_button" class="quantity_inc quantity_control" @onclick="AddQuant"><i class="fa fa-chevron-up" aria-hidden="true"></i></button>
                                <button id="quantity_dec_button" class="quantity_dec quantity_control" @onclick="SubstractQuant"><i class="fa fa-chevron-down" aria-hidden="true"></i></button>
                            </div>
                        </div>
                        <div class="button cart_button"><button href="#" @onclick="AddItemToCart">Add to Cart</button></div>
                    </div>

                </div>
            </div>
        </div>

        <div class="row description_row">
            <div class="col">
                <div class="description_title_container">
                    <div class="description_title">Description</div>
                </div>
                <div class="description_text">
                    <p>@((MarkupString)(CurrentProduct?.Description ?? ""))</p>
                </div>
            </div>
        </div>
    </div>
</div>
@using BlazorUI.Data
@inject BlazorUI.Helpers.ApiHelper api;

@inject Blazored.LocalStorage.ILocalStorageService localStorageService;
@inject IJSRuntime JSRuntime;

@using BlazorUI.Helpers;

@code {
    [Parameter]
    public int Id { get; set; }

    public int QuantityToAdd { get; set; } = 1;

    private Domain.Products.Product CurrentProduct = new Domain.Products.Product()
    {
        ProductPhotos = new List<Domain.Products.ProductPhoto>()
    {
            new Domain.Products.ProductPhoto() { PhotoPath = "images/details_1.jpg" }
        }
    };

    protected override async Task OnInitializedAsync()
    {
        if (CurrentProduct.Id < 1)
            await GetProduct();
    }

    async Task AddQuant()
    {
        if (QuantityToAdd < 99)
            QuantityToAdd++;
    }

    async Task SubstractQuant()
    {
        if (QuantityToAdd > 1)
            QuantityToAdd--;
    }

    async Task AddItemToCart()
    {
        var cart = await localStorageService.GetLocalStorageItem<Domain.DTO.ShoppingCartDTO>("ShoppingCart");

        if (cart == null)
            cart = new Domain.DTO.ShoppingCartDTO();

        var productToStore = new Domain.Products.Product()
        {
            Id = CurrentProduct.Id,
            Identifier = CurrentProduct.Identifier,
            ProductPhotos = CurrentProduct.ProductPhotos,
            Discount = CurrentProduct.Discount,
            Name = CurrentProduct.Name,
            Price = CurrentProduct.Price
        };

        cart.InsertIntoCart(productToStore, QuantityToAdd);
        await JSRuntime.InvokeAsync<object>("alert", "Product was added to your Cart!");

        await localStorageService.SetLocalStorageItem("ShoppingCart", cart);
    }

    async Task GetProduct()
    {
        var response = await api.Get<Domain.Products.Product>("api/Product/" + Id);
        CurrentProduct = response?.Result ?? new Domain.Products.Product()
        {
            ProductPhotos = new List<Domain.Products.ProductPhoto>()
        {
                new Domain.Products.ProductPhoto() { PhotoPath = "images/details_1.jpg" }
            },
        };
        await InvokeAsync(() => this?.StateHasChanged());
    }
}
